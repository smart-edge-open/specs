// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2019 Intel Corporation

syntax = "proto3";

package openness.eaa;
option go_package = "github.com/smart-edge-open/eaa;eaa";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "Edge Application Agent Interface";
        version: "1.0";
        contact: {
            name: "Smart Edge";
            url: "github.com/smartedgemec/eaa";
            email: "support@smart-edge.com";
        };
        license: {
            name: "Apache 2.0 License";
            url: "https://github.com/smartedgemec/eaa/blob/master/LICENSE";
        };
    };
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    responses: {
        key: "403";
        value: {
            description: "Unauthorized";
        }
    }
};

// Uniform Resource Name
message URN {
    // The per-namespace unique portion of the URN that when appended to the
    // namespace with a separator forms the complete URN.
    string id = 1;
    // The non-unique portion of the URN that identifies the class excluding a
    // trailing separator.
    string namespace = 2;
}

// Service
message Service {
    // Name of the producer app
    URN urn = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {read_only: true}];
    // Human readable description provided by producer
    string description = 2;
    // URI for API of external app
    string endpoint_uri = 3;
    // Health status
    string status = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {read_only: true}];
    // Notitication types that will be produced
    repeated NotificationDescriptor notifications = 5;
}

// Notification descriptor
message NotificationDescriptor {
    // Name of notification message type
    string name = 1;
    // Version of notification message type
    string version = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^((([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)$"}];
    // Human readable description of message type
    string description = 3;
}

// Service List
message ServiceList {
    // Services currently activated by a producer
    repeated Service services = 1;
}

// Subscription
message Subscription {
    // The name of the producer app. The unique ID is optional for subscribing
    // and if not given will subscribe to any producer in the namespace.
    URN urn = 1;
    // The list of all notification types registered by all producers in this
    // namespace.
    repeated NotificationDescriptor notifications = 2;
}

// Subscription List
message SubscriptionList {
    // Subscriptions currently active
    repeated Subscription subscriptions = 1;
}

// Notification payload (from producer)
message NotificationFromProducer {
    // Name of notification type
    string name = 1;
    // Version of notification type
    string version = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^((([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)$"}];
    // The payload can be any JSON object with a name and version-specific schema.
    RawJSONObject payload = 3;
}

// Notification payload (to subscriber)
message NotificationToConsumer {
    // Name of notification type
    string name = 1;
    // Version of notification type
    string version = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {pattern: "^((([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?)$"}];
    // The payload can be any JSON object with a name and version-specific schema.
    RawJSONObject payload = 3;
    // Namespace and id of the producer that notification comes from. Used only
    // when sending notification from EAA to consumer. Producer do not have to
    // fill this field.
    URN urn = 4; 
}

// Any object
message RawJSONObject {
}

service Eaa {
    // Connection Establishment
    rpc GetNotifications (google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/notifications"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Connect to a secure WebSocket to receive streaming notifications (see reference for notification to consumer for schema of messages received on websocket).";
            responses: {
                key: "101";
                value: {
                    description: "Upgrade to Websockets";
                }
            }
        };
    }

    // Service Activation
    rpc RegisterApplication (Service) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/services"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Registers a producer to begin publishing notifications in the local MEC environment.";
            responses: {
                key: "200";
                value: {
                    description: "OK";
                }
            }
            responses: {
                key: "400";
                value: {
                    description: "Invalid content, a required property is missing";
                }
            }
        };
    }

    // Service Deactivation
    rpc DeregisterApplication (google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/services"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Unregisters a producer for all of its notification types in the local MEC environment. Once a producer has been unregistered, it will need to be registered and consumers will need to subscribe using the new service ID for notifications to be delivered.";
            responses: {
                key: "204";
                value: {
                    description: "Service registration removed";
                }
            }
        };
    }

    // Service Discovery
    rpc GetServices (google.protobuf.Empty) returns (ServiceList) {
        option (google.api.http) = {
            get: "/services"
            response_body: "services"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "List all currently activated producers on the local appliance and get their status, subscribable notification types, and address (for services with their own exposed API).";
        };
    }

    // Service Subscription
    rpc SubscribeNotifications (Subscription) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/subscriptions/{urn.namespace}"
            body: "notifications"
            additional_bindings: {
                post: "/subscriptions/{urn.namespace}/{urn.id}"
                body: "notifications"
            }
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Subscribe to a set of notification types, optionally specifying the exact producer by URN.";
            responses: {
                key: "201";
                value: {
                    description: "Subscription added";
                }
            }
        };
    }

    // Service Unsubscription 
    rpc UnsubscribeNotifications (Subscription) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/subscriptions/{urn.namespace}"
            additional_bindings: {
                delete: "/subscriptions/{urn.namespace}/{urn.id}"
            }
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Unsubscribe from a particular or entire namespace of producers.";
            responses: {
                key: "204";
                value: {
                    description: "Subscription removed";
                }
            }
        };
    }

    // Mass Unsubscription
    rpc UnsubscribeAllNotifications (google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/subscriptions"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Unsubscribe from all producers except the platform defaults (reset to default).";
            responses: {
                key: "204";
                value: {
                    description: "Non-default subscriptions removed";
                }
            }
        };
    }

    // List Subscriptions
    rpc GetSubscriptions (google.protobuf.Empty) returns (SubscriptionList) {
        option (google.api.http) = {
            get: "/subscriptions"
            response_body: "subscriptions"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "List all producers currently subscribed to and their registered notification types.";
            responses: {
                key: "400";
                value: {
                    description: "Invalid content, a required property is missing";
                }
            }
        };
    }

    // Publish Notification
    rpc PushNotificationToSubscribers (NotificationFromProducer) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/notifications"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "Push a single notification to all subscribed applications.";
            responses: {
                key: "202";
                value: {
                    description: "Notification was received and will be forwarded";
                }
            }
        };
    }

    // Websocket defines the messages sent over a websocket (unused in REST API).
    // This is just included here such that the schema ref can be generated, and
    // is not to be implemented as a handler.
    rpc Websocket (google.protobuf.Empty) returns (NotificationToConsumer) {}
}
